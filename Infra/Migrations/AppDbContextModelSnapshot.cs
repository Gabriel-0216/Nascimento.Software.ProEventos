// <auto-generated />
using System;
using Infra.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infra.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("PalestranteEvento", b =>
                {
                    b.Property<int>("EventoId")
                        .HasColumnType("int");

                    b.Property<int>("PalestranteId")
                        .HasColumnType("int");

                    b.HasKey("EventoId", "PalestranteId");

                    b.HasIndex("PalestranteId");

                    b.ToTable("PalestranteEvento");
                });

            modelBuilder.Entity("ProEventos.Domain.Models.Evento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME")
                        .HasColumnName("CreatedAt");

                    b.Property<DateTime>("DataEvento")
                        .HasColumnType("DATETIME")
                        .HasColumnName("DataEvento");

                    b.Property<string>("ImagemUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("NVARCHAR(200)")
                        .HasColumnName("ImagemUrl");

                    b.Property<string>("Local")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("Local");

                    b.Property<int>("QuantidadePessoas")
                        .HasColumnType("INT")
                        .HasColumnName("QuantidadePessoas");

                    b.Property<string>("Tema")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("Tema");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("DATETIME")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Eventos", (string)null);
                });

            modelBuilder.Entity("ProEventos.Domain.Models.Lote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME")
                        .HasColumnName("CreatedAt");

                    b.Property<DateTime?>("DataFim")
                        .HasColumnType("DATETIME")
                        .HasColumnName("DataFim");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("DATETIME")
                        .HasColumnName("DataInicio");

                    b.Property<int>("EventoId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("Nome");

                    b.Property<decimal>("Preco")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("Preco");

                    b.Property<int>("Quantidade")
                        .HasColumnType("INT")
                        .HasColumnName("Quantidade");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("DATETIME")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("EventoId");

                    b.ToTable("Lotes", (string)null);
                });

            modelBuilder.Entity("ProEventos.Domain.Models.Palestrante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Descricao");

                    b.Property<string>("ImagemUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("NVARCHAR(200)")
                        .HasColumnName("ImagemUrl");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("Nome");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("DATETIME")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Palestrantes", (string)null);
                });

            modelBuilder.Entity("ProEventos.Domain.Models.RedeSocial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME")
                        .HasColumnName("CreatedAt");

                    b.Property<int?>("EventoId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("Nome");

                    b.Property<int?>("PalestranteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("DATETIME")
                        .HasColumnName("UpdatedAt");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnName("Url");

                    b.HasKey("Id");

                    b.HasIndex("EventoId");

                    b.HasIndex("PalestranteId");

                    b.ToTable("RedesSociais", (string)null);
                });

            modelBuilder.Entity("PalestranteEvento", b =>
                {
                    b.HasOne("ProEventos.Domain.Models.Evento", null)
                        .WithMany()
                        .HasForeignKey("EventoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_PalestranteEvento_EventoId");

                    b.HasOne("ProEventos.Domain.Models.Palestrante", null)
                        .WithMany()
                        .HasForeignKey("PalestranteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_PalestranteEvento_PalestranteId");
                });

            modelBuilder.Entity("ProEventos.Domain.Models.Evento", b =>
                {
                    b.OwnsOne("ProEventos.Domain.Models.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<int>("EventoId")
                                .HasColumnType("int");

                            b1.Property<string>("EmailAddress")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("EmailAddress");

                            b1.HasKey("EventoId");

                            b1.ToTable("Eventos");

                            b1.WithOwner()
                                .HasForeignKey("EventoId");
                        });

                    b.OwnsOne("ProEventos.Domain.Models.ValueObjects.Telefone", "Telefone", b1 =>
                        {
                            b1.Property<int>("EventoId")
                                .HasColumnType("int");

                            b1.Property<string>("NumeroTelefone")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("NVARCHAR(20)")
                                .HasColumnName("NumeroTelefone");

                            b1.HasKey("EventoId");

                            b1.ToTable("Eventos");

                            b1.WithOwner()
                                .HasForeignKey("EventoId");
                        });

                    b.Navigation("Email");

                    b.Navigation("Telefone");
                });

            modelBuilder.Entity("ProEventos.Domain.Models.Lote", b =>
                {
                    b.HasOne("ProEventos.Domain.Models.Evento", "Evento")
                        .WithMany("Lotes")
                        .HasForeignKey("EventoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evento");
                });

            modelBuilder.Entity("ProEventos.Domain.Models.Palestrante", b =>
                {
                    b.OwnsOne("ProEventos.Domain.Models.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<int>("PalestranteId")
                                .HasColumnType("int");

                            b1.Property<string>("EmailAddress")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("EmailAddress");

                            b1.HasKey("PalestranteId");

                            b1.ToTable("Palestrantes");

                            b1.WithOwner()
                                .HasForeignKey("PalestranteId");
                        });

                    b.OwnsOne("ProEventos.Domain.Models.ValueObjects.Telefone", "Telefone", b1 =>
                        {
                            b1.Property<int>("PalestranteId")
                                .HasColumnType("int");

                            b1.Property<string>("NumeroTelefone")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("NVARCHAR(20)")
                                .HasColumnName("NumeroTelefone");

                            b1.HasKey("PalestranteId");

                            b1.ToTable("Palestrantes");

                            b1.WithOwner()
                                .HasForeignKey("PalestranteId");
                        });

                    b.Navigation("Email");

                    b.Navigation("Telefone");
                });

            modelBuilder.Entity("ProEventos.Domain.Models.RedeSocial", b =>
                {
                    b.HasOne("ProEventos.Domain.Models.Evento", "Evento")
                        .WithMany("RedesSociais")
                        .HasForeignKey("EventoId");

                    b.HasOne("ProEventos.Domain.Models.Palestrante", "Palestrante")
                        .WithMany("RedesSociais")
                        .HasForeignKey("PalestranteId");

                    b.Navigation("Evento");

                    b.Navigation("Palestrante");
                });

            modelBuilder.Entity("ProEventos.Domain.Models.Evento", b =>
                {
                    b.Navigation("Lotes");

                    b.Navigation("RedesSociais");
                });

            modelBuilder.Entity("ProEventos.Domain.Models.Palestrante", b =>
                {
                    b.Navigation("RedesSociais");
                });
#pragma warning restore 612, 618
        }
    }
}
